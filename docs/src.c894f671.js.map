{"version":3,"sources":["../src/client.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.c894f671.js","sourceRoot":"../example","sourcesContent":["export interface WSMessage {\n  event: string\n  to?: string\n  from?: string\n  data: any\n}\n\nexport type ClientEventType = \"ws_open\" | \"ws_error\" | \"ws_message\" | \"ws_close\"\n  | \"connection_request\" | \"connection_accepted\" | \"on_ice_candidate\" | \"add_ice_candidate\" | \"set_remote_description\"\n  | \"on_offer\" | \"on_dc_open\" | \"on_dc_message\"\n\nfunction PeerNotFoundException(message: string){\n  this.message = message\n  this.name = \"PeerNotFoundException\"\n}\n\nexport default class Client {\n  url: string\n  ws: any\n  id: string\n  debug: boolean\n  peers: Peer[]\n  listeners: any\n\n  constructor(url: string, debug: boolean = false){\n    this.url = url\n    this.debug = debug\n    this.peers =[]\n    this.listeners = {}\n\n    this.addListener(\"connection_request\", this.onConnectionRequest.bind(this))\n    this.addListener(\"connection_accepted\", this.onConnectionAccepted.bind(this))\n    this.addListener(\"on_ice_candidate\", this.onIceCandidate.bind(this))\n    this.addListener(\"add_ice_candidate\", this.addIceCandidate.bind(this))\n    this.addListener(\"set_remote_description\", this.setRemoteDescription.bind(this))\n    this.addListener(\"on_offer\", this.onOffer.bind(this))\n    this.addListener(\"on_dc_open\", this.onDCOpen.bind(this))\n    this.addListener(\"on_dc_message\", this.onDCMessage.bind(this))\n  }\n\n  async getPeers(){\n    // @ts-ignore\n    const res = await fetch(\"https://7pd7gfpem8.execute-api.us-west-2.amazonaws.com/dev/peers\").then(data => data.json())\n    // this.peers = res.map(result => new Peer(result.id, this.onEvent.bind(this), result.name))\n    return res\n  }\n\n  async requestConnection(peerId: string){\n    await this.send(\"connection_request\", peerId, {})\n  }\n\n  addListener(eventType: ClientEventType, listener: (message: any) => Promise<void>){\n    if(this.listeners[eventType]){\n      this.listeners[eventType].push(listener)\n    } else {\n      this.listeners[eventType] = [listener]\n    }\n  }\n\n  onEvent(eventType: ClientEventType, ...data){\n    if(this.listeners[eventType]){\n      this.listeners[eventType].forEach(listener => {listener(...data)})\n    }\n  }\n\n  connect(){\n    // @ts-ignore\n    this.ws = new WebSocket(this.url)\n\n    this.ws.addEventListener('open', (event)=>{this.onEvent(\"ws_open\", event)})\n    this.ws.addEventListener('close', (event)=>{this.onEvent(\"ws_close\", event)})\n    this.ws.addEventListener('error', (event)=>{this.onEvent(\"ws_error\", event)})\n    this.ws.addEventListener('message', (event)=>{this.onEvent(\"ws_message\", event)})\n    this.ws.addEventListener('message', (message: WSMessage)=>{\n      const data = JSON.parse(message.data)\n      try {\n        this.onEvent(data.eventType, data)\n      } catch(e){\n        console.error(\"ws_message Error: \", e)\n      }\n    })\n  }\n\n  async send(eventType: ClientEventType, to, data){\n    await this.ws.send(JSON.stringify({\n      eventType,\n      to,\n      data\n    }))\n  }\n\n  // A new Peer wants to connect\n  async onConnectionRequest(message){\n    try {\n      const p: Peer = new Peer(message.from, this.onEvent.bind(this))\n      this.addPeer(p)\n      await p.connect(false)\n      await this.send(\"connection_accepted\", message.from, {})\n    } catch(e){\n      console.error(\"ERROR: \", e)\n    }\n  }\n\n  async onConnectionAccepted(message){\n    const peer: Peer = new Peer(message.from, this.onEvent.bind(this))\n    this.addPeer(peer)\n    const offer = await peer.connect(true)\n  }\n\n  async setRemoteDescription(message){\n    try {\n      const peer = this.getPeer(message.from)\n\n      // @ts-ignore\n      const description = new RTCSessionDescription()\n      description.type = message.data.offer.type\n      description.sdp = message.data.offer.sdp\n      await peer.connection.setRemoteDescription(description)\n\n      if(!peer.connection.isHost){\n        const offer = await peer.connection.createAnswer()\n        await peer.connection.setLocalDescription(offer)\n        this.send(\"set_remote_description\", peer.id, {offer})\n      }\n    } catch(e){\n      console.error(\"ERROR: \", e)\n\n    }\n  }\n\n  async addIceCandidate(message){\n    try {\n      const peer = this.getPeer(message.from)\n      // @ts-ignore\n      const candidate = new RTCIceCandidate(message.data.candidate)\n      await peer.connection.addIceCandidate(candidate)\n    } catch(e){\n      console.error(\"ERROR: \", e)\n      throw e\n    }\n  }\n\n  async onIceCandidate(id, e){\n    if(e && e.candidate){\n      const candidate = e.candidate.toJSON()\n      this.send(\"add_ice_candidate\", id, {candidate})\n    }\n  }\n\n  async onOffer(to: string, offer){\n    this.send(\"set_remote_description\", to, {offer})\n  }\n\n  async onDCOpen(peerId: string, event){\n    // console.log(\"onDCOpen: \", event)\n\n  }\n  async onDCMessage(peerId: string, event){\n    // console.log(\"onDCMessage: \", event)\n  }\n\n  async rtcSend(peerId: string, data: any){\n    try {\n      const peer = this.getPeer(peerId)\n      peer.connection.send(data)\n    } catch(e){\n      console.error(\"ERROR: \", e)\n      throw e\n    }\n  }\n\n  getPeer(id: string){\n    const peer = this.peers.find(p => p.id === id)\n    if(peer === undefined){\n      throw new PeerNotFoundException(\"Peer not found with id: \" + id)\n    }\n    return peer\n  }\n\n  addPeer(peer: Peer){\n    // console.log(\"add peer\", peer)\n    this.peers.push(peer)\n  }\n}\n\n\nexport class Peer {\n  id: string\n  name?: string\n  onEvent: any\n  connection: Connection\n\n  constructor(id: string, onEvent: any, name?: string){\n    this.id = id\n    this.onEvent = onEvent\n    this.name = name\n    this.connection = null\n  }\n\n  async connect(isHost=false){\n    this.connection = new Connection(this.id, isHost, this.onEvent)\n    await this.connection.init()\n    this.connection.pc.onicecandidate = (event)=> {\n      this.onEvent(\"on_ice_candidate\", this.id, event)\n    }\n    if(isHost){\n      const offer = await this.connection.createOffer()\n      await this.connection.setLocalDescription(offer)\n      this.onEvent(\"on_offer\", this.id, this.connection.pc.localDescription)\n    }\n  }\n}\n\nexport class Connection {\n  to: string\n  isHost: boolean\n  pc: any\n  dc: any\n  onEvent: any\n\n  constructor(to: string, isHost: boolean=false, onEvent: any){\n    this.to = to\n    this.isHost = isHost\n    this.onEvent = onEvent\n  }\n\n  async init(){\n    // @ts-ignore\n    this.pc = new RTCPeerConnection(null)\n    this.pc.ondatachannel = this.ondatachannel.bind(this)\n\n    if(this.isHost){\n      this.dc = this.pc.createDataChannel(this.to)\n      this.dc.onopen = this.onopen.bind(this)\n      this.dc.onclose = this.onclose.bind(this)\n      this.dc.onmessage = this.onmessage.bind(this)\n    }\n  }\n\n  // pc events\n  ondatachannel(e){\n    // console.log(\"ondatachannel(): to\", this.to)\n\n    if(!this.isHost){\n      this.dc = e.channel\n      this.dc.onopen = this.onopen.bind(this)\n      this.dc.onclose = this.onclose.bind(this)\n      this.dc.onmessage = this.onmessage.bind(this)\n    }\n  }\n\n  // dc events\n  onopen(event){\n    // console.log(\"onopen(): to\", this.to)\n    // console.log(\"onopen(): e\", e)\n    this.onEvent(\"on_dc_open\", this.to, event)\n    // this.send(\"DATA!!!\")\n  }\n\n  onclose(e){\n    console.log(\"onclose(): to\", this.to)\n  }\n\n  onmessage(event){\n    this.onEvent(\"on_dc_message\", this.to, event)\n    // console.log(\"onmessage(): to\", this.to)\n    // console.log(e)\n  }\n\n  send(data: any){\n    this.dc.send(data)\n  }\n\n  async close(){\n    await this.dc.close()\n    await this.pc.close()\n\n    this.dc = null\n    this.pc = null\n  }\n\n\n  async addIceCandidate(candidate){\n    console.log(\"addIceCandidate(): to\", this.to)\n    return await this.pc.addIceCandidate(candidate)\n  }\n\n  async createOffer(){\n    console.log(\"createOffer(): to\", this.to)\n    return await this.pc.createOffer()\n  }\n\n  async setLocalDescription(desc){\n    console.log(\"setLocalDescription(): to\", this.to)\n    return await this.pc.setLocalDescription(desc)\n  }\n\n  async setRemoteDescription(desc){\n    console.log(\"setRemoteDescription(): to\", this.to)\n    return await this.pc.setRemoteDescription(desc)\n  }\n\n  async createAnswer(){\n    console.log(\"createAnswer(): to\", this.to)\n    return await this.pc.createAnswer()\n  }\n\n}\n","import Client from '../../dist/client.js'\n\nconst url = \"wss://bamk6ty9r9.execute-api.us-west-2.amazonaws.com/dev\"\nconst client = new Client(url, true)\nlet pointer = {x: 0, y: 0}\n\nconst connectToPeer = (id: string, event: any)=>{\n  console.log(\"connecting to:  \", id)\n  console.log(\"this: \", event)\n  client.requestConnection(id)\n}\n\nconst connectToLobby = async()=>{\n  console.log(\"connecting to loby\")\n  await client.connect()\n}\n\nconst createPeerListItem = (id: string)=>{\n  let list_item_el = document.createElement(\"div\")\n  list_item_el.className = \"item\"\n\n  // Text Id\n  let id_el = document.createTextNode(id)\n  list_item_el.appendChild(id_el)\n\n  // Connect button\n  let button = document.createElement(\"input\")\n  button.type = \"button\"\n  button.value = \"connect\"\n  button.onclick = connectToPeer.bind(this, id)\n  list_item_el.appendChild(button)\n\n  let list = document.getElementById(\"peerList\")\n  list.append(list_item_el)\n}\n\n\nwindow.onload = async() => {\n  // Connect button\n  let button = document.createElement(\"input\")\n  button.type = \"button\"\n  button.value = \"connect to lobby\"\n  button.onclick = connectToLobby\n  document.body.appendChild(button)\n\n  client.addListener('ws_open', async(e)=>{\n    setInterval(async()=>{\n      let peers = await client.getPeers()\n      const list = document.getElementById(\"peerList\")\n      while (list.firstChild) {\n        list.removeChild(list.firstChild)\n      }\n      peers.forEach(peer => {\n        createPeerListItem(peer.id)\n      })\n    }, 500)\n  })\n\n  document.onmousemove = (event)=> {\n    pointer.x = event.x\n    pointer.y = event.y\n  }\n\n  client.addListener('on_dc_open', (peerId: string, e)=>{\n    console.log(\"on_dc_open\", e)\n    setInterval(()=>{\n      client.rtcSend(peerId, JSON.stringify(pointer))\n    })\n  })\n\n  client.addListener('on_dc_message', (peerId: string, e)=>{\n    // console.log(\"on_dc_message\", e)\n    let square = document.getElementById(peerId)\n    if(!square){\n      square = document.createElement(\"div\")\n      square.className = \"square\"\n      square.id = peerId\n      document.body.appendChild(square)\n    }\n\n    let pointer = JSON.parse(e.data)\n    square.style.left = pointer.x + \"px\"\n    square.style.top = pointer.y + \"px\"\n\n  })\n}\n"]}